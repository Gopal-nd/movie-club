// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  username       String   @unique
  password       String
  profilePicture String?
  joinDate       DateTime @default(now())
  role           Role     @default(USER)

  reviews   Review[]
  watchlist Watchlist[]
}

model Movie {
  id                  String    @id @default(cuid())
  movieId             Int       @unique
  imdbId              String? // e.g., "tt16311594"
  title               String
  originalTitle       String
  originalLanguage    String
  overview            String?
  tagline             String?
  homepage            String?
  status              String
  releaseDate         DateTime?
  runtime             Int?
  budget              Int?
  revenue             Int?
  popularity          Float?
  voteAverage         Float?
  voteCount           Int?
  video               Boolean   @default(false)
  posterPath          String?
  backdropPath        String?
  genres              String[] // e.g., ["Action", "Drama"]
  originCountries     String[] // e.g., ["US"]
  spokenLanguages     String[] // e.g., ["English"]
  productionCountries String[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Review    Review[]
  Watchlist Watchlist[]

  @@index([movieId])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  movieId   Int
  rating    Int
  text      String?
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [movieId])

  @@unique([userId, movieId])
  @@index([movieId])
}

model Watchlist {
  userId  String
  movieId Int
  addedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [movieId])

  @@id([userId, movieId])
  @@index([movieId])
}
