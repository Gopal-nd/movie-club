// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
USER
ADMIN
}


model User {
id String @id @default(cuid())
email String @unique
username String @unique
password String
profilePicture String?
joinDate DateTime @default(now())
role Role @default(USER)


reviews Review[]
watchlist Watchlist[]
}


model Movie {
id String @id @default(cuid())
title String
genres String[]
releaseYear Int?
director String?
cast Json? // [{ name, role }]
synopsis String?
posterUrl String?
trailers String[]
averageRating Float @default(0)
ratingsCount Int @default(0)
createdAt DateTime @default(now())


reviews Review[]
watchlistedBy Watchlist[]
@@index([title])
}


model Review {
id String @id @default(cuid())
userId String
movieId String
rating Int
text String?
createdAt DateTime @default(now())


user User @relation(fields: [userId], references: [id])
movie Movie @relation(fields: [movieId], references: [id])


@@unique([userId, movieId]) // one review per user per movie
@@index([movieId])
}


model Watchlist {
userId String
movieId String
addedAt DateTime @default(now())


user User @relation(fields: [userId], references: [id])
movie Movie @relation(fields: [movieId], references: [id])


@@id([userId, movieId])
@@index([movieId])
}